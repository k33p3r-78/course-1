# Есть два списка: tutors - имена учеников, groups - названия их классов. 
# Необходимо реализовать генератор или функцию-генератор, возвращающий кортежи вида '(<tutor>, <group>)'.
# Техническое задание

# Функция (или генератор) должна работать со списками любой длины.
# Количество генерируемых кортежей не должно быть больше длины списка tutors.
# Если в списке groups меньше элементов, чем в списке tutors, необходимо вывести последние кортежи 
# в виде: '(<tutor>, None)', например: '('Станислав', None)'
# Если в списке tutors меньше элементов, чем в списке groups, то смотри пункт 2.
# Генератор возвращает кортежи указанного вида.
# Доказать, что вы создали именно генератор. Вывести все его значения на экран.
# Не используйте в этом задании функции zip и zip_longest.
# Не меняйте исходные списки tutors и groups и не создавайте новых списков.
# Подтвердите работоспособность(выведите в консоль результаты) для обоих вариантов: groups меньше tutors и tutors меньше groups.
# Примечание:

# Сделать эту задачу через функцию-генератор проще. Если сделали, попробуйте сделать именно через генераторное выражение, т.е. «в одну строку».


def compare_lists(tutors, groups):
    for idx, tutor in enumerate(tutors):
        if idx < len(groups):
            yield tutor, groups[idx]
        else:
            yield tutor, None



if __name__ == '__main__':
    tutors = [
        'Иван', 'Анастасия', 'Петр', 'Сергей', 
        'Дмитрий', 'Борис', 'Елена'
    ]
    groups = [
        '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
    ]

    first_res = compare_lists(tutors, groups)
    print(f'Ученики: {tutors}')
    print(f'Классы: {groups}')
    print(f'Тип объекта: {type(first_res)}')
    print('Все значения генератора:')
    print(*first_res, sep='\n')

    groups = [
        '9А', '7В', '9Б', '9В'
    ]

    second_res = compare_lists(tutors, groups)
    print(f'Ученики: {tutors}')
    print(f'Классы: {groups}')
    print(f'Тип объекта: {type(second_res)}')
    print('Все значения генератора:')
    print(*second_res, sep='\n')
    
    gen1 = ((tutor, groups[idx]) if idx < len(groups) else (tutor, None) for idx, tutor in enumerate(tutors))



